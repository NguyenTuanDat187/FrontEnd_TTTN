package com.nguyentuandat.fmcarer.NETWORK;

import com.nguyentuandat.fmcarer.MODEL.Care_Schelude;
import com.nguyentuandat.fmcarer.MODEL.Children;
import com.nguyentuandat.fmcarer.MODEL.Post;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.ApiResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.CareScheludeResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.ChildrenResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.ImageUploadResponse; // S·∫Ω c·∫ßn c·∫≠p nh·∫≠t
import com.nguyentuandat.fmcarer.MODEL_CALL_API.MultiImageUploadResponse; // Th√™m m·ªõi cho nhi·ªÅu ·∫£nh
import com.nguyentuandat.fmcarer.MODEL_CALL_API.OtpRequest;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.OtpResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.PostRequest;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.PostResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.SingleCareScheludeResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.UserRequest;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.UserResponse;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.UserUpdateRequest;
import com.nguyentuandat.fmcarer.MODEL_CALL_API.SubUserRequest;

import java.util.List;
import java.util.Map;

import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.Multipart;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Part;
import retrofit2.http.Path;
import retrofit2.http.Query;

public interface ApiService {

    // ‚úÖ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
    @POST("/api/users/register")
    Call<UserResponse> registerUser(@Body UserRequest request);

    // ‚úÖ ƒêƒÉng nh·∫≠p
    @POST("/api/users/login")
    Call<UserResponse> loginUser(@Body UserRequest request);

    // ‚úÖ G·ª≠i v√† x√°c minh OTP
    @POST("/api/users/send-otp")
    Call<OtpResponse> sendOtp(@Body OtpRequest request);

    @POST("/api/users/verify")
    Call<UserResponse> verifyOtp(@Body OtpRequest request);

    // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    @POST("/api/users/update")
    Call<UserResponse> updateUser(@Body UserUpdateRequest request);

    // ‚úÖ T√†i kho·∫£n ph·ª•
    @POST("/api/users/subuser/create-or-update")
    Call<ApiResponse> createOrUpdateSubUser(@Body SubUserRequest subUser);

    // ‚úÖ Children
    @GET("/api/children/{userId}")
    Call<ChildrenResponse> getChildrenByUser(@Path("userId") String userId);

    @POST("/api/children")
    Call<Children> addChild(@Body Children child);

    @PUT("/api/children/{childId}")
    Call<Children> updateChild(@Path("childId") String childId, @Body Children updatedChild);

    @DELETE("/api/children/{childId}")
    Call<Void> deleteChild(@Path("childId") String childId);

    // ‚úÖ Care Schedules / Reminders

    // ‚ûï T·∫°o reminder ‚Üí tr·∫£ v·ªÅ 1 ph·∫ßn t·ª≠ m·ªõi t·∫°o
    @POST("/api/reminders")
    Call<SingleCareScheludeResponse> createReminder(@Body Map<String, Object> reminder);

    // üìã L·∫•y to√†n b·ªô danh s√°ch reminder
    @GET("/api/reminders")
    Call<CareScheludeResponse> getAllReminders(@retrofit2.http.Query("user_id") String userId);


    // üîç L·∫•y reminder theo ID ‚Üí tr·∫£ v·ªÅ 1 ph·∫ßn t·ª≠
    @GET("/api/reminders/{id}")
    Call<SingleCareScheludeResponse> getReminderById(@Path("id") String reminderId);

    // üìù C·∫≠p nh·∫≠t reminder ‚Üí tr·∫£ v·ªÅ danh s√°ch m·ªõi nh·∫•t (ho·∫∑c ch·ªâ ph·∫ßn t·ª≠ ƒë√≥ tu·ª≥ backend)
    @PUT("/api/reminders/{id}")
    Call<SingleCareScheludeResponse> updateReminder(@Path("id") String reminderId, @Body Map<String, Object> updateData);

    // ‚ùå X√≥a reminder theo ID
    @DELETE("/api/reminders/{id}")
    Call<ApiResponse> deleteReminder(@Path("id") String reminderId);

    @PUT("api/reminders/{id}/complete")
    Call<SingleCareScheludeResponse> completeReminder(@Path("id") String id);

    // ‚úÖ Post APIs

    @POST("/api/posts")
    Call<PostResponse> createPost(@Body PostRequest postRequest);

    // ‚úÖ L·∫•y t·∫•t c·∫£ b√†i vi·∫øt
    @GET("/api/posts")
    Call<List<Post>> getAllPosts();

    // ‚úÖ L·∫•y danh s√°ch b√†i vi·∫øt theo userId (l·ªçc theo user)
    @GET("/api/posts")
    Call<List<Post>> getPostsByUserId(@Query("userId") String userId);

    // ‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt
    @PUT("/api/posts/{postId}")
    Call<Post> updatePost(@Path("postId") String postId, @Body Post updatedPost);

    // ‚úÖ X√≥a b√†i vi·∫øt
    @DELETE("/api/posts/{postId}")
    Call<ApiResponse> deletePost(@Path("postId") String postId, @Query("user_id") String userId);



    // MARK: - API UPLOAD ·∫¢NH

    // ‚úÖ Upload m·ªôt ·∫£nh
    // S·ª≠ d·ª•ng @Multipart ƒë·ªÉ ch·ªâ ƒë·ªãnh ƒë√¢y l√† request d·∫°ng multipart/form-data
    // @Part MultipartBody.Part "image" ph·∫£i kh·ªõp v·ªõi t√™n tr∆∞·ªùng 'image' ·ªü backend (upload.single('image'))
    @Multipart
    @POST("/api/upload")
    Call<ImageUploadResponse> uploadSingleImage(@Part MultipartBody.Part image);

    // ‚úÖ Upload nhi·ªÅu ·∫£nh c√πng l√∫c
    // S·ª≠ d·ª•ng List<MultipartBody.Part> ƒë·ªÉ g·ª≠i nhi·ªÅu file.
    // T√™n tr∆∞·ªùng "images" ph·∫£i kh·ªõp v·ªõi t√™n tr∆∞·ªùng 'images' ·ªü backend (upload.array('images', ...))
    @Multipart
    @POST("/api/upload-multiple")
    Call<MultiImageUploadResponse> uploadMultipleImages(@Part List<MultipartBody.Part> images);

    Call<UserResponse> uploadImage(MultipartBody.Part avatarPart);

    // B·∫°n c≈©ng c√≥ th·ªÉ th√™m c√°c tr∆∞·ªùng d·ªØ li·ªáu kh√°c c√πng v·ªõi file n·∫øu c·∫ßn:
    // Call<MultiImageUploadResponse> uploadMultipleImages(
    //     @Part List<MultipartBody.Part> images,
    //     @Part("description") RequestBody description
    // );
}